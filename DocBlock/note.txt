00:00 - DocBlock
###
"Trong khoá học này, chúng tôi đã bàn về phần bình luận ở đầu khóa lúc 0:05. Chúng tôi đã bao gồm hai cú pháp của bình luận trên một dòng đơn và cũng đã giới thiệu cú pháp của bình luận nhiều dòng. Ngoài ra, còn có một loại khác được gọi là 'duck block' có thể được thêm vào các hàm, phương thức, lớp, giao diện, biến, thuộc tính và nhiều thứ khác. Cú pháp của 'duck block' tương tự với bình luận nhiều dòng, chỉ có thêm một dấu sao ở đây. 'Duck block' cung cấp một cách tổ chức tài liệu tốt hơn cho mã của bạn và nó có thể được sử dụng để tự động tạo ra tài liệu API, có thể được sử dụng bởi các nhà phát triển khác đang đọc mã của bạn, có thể được sử dụng để cải thiện hoặc thay đổi chức năng thông qua các chú thích, có thể được sử dụng bởi các IDE để cung cấp tính năng nhập tự động tốt hơn và nhiều hơn nữa.
 'Duck block' cũng có thể có chứa văn bản. Hãy cùng khám phá một số thẻ mà bạn thường xem và sử dụng."

00:48 - @param & @return tags
###
Các thẻ param và return mà chúng ta sẽ xem xét ở đây là thẻ param và return. Thẻ param có thể được sử dụng để mô tả một đối số của một hàm hoặc phương thức và thẻ return có thể được sử dụng để mô tả kiểu trả về. Những thẻ này đặc biệt hữu ích khi bạn không sử dụng type hinting hoặc bạn đơn giản chỉ muốn cung cấp thông tin bổ sung về kiểu đối số hoặc kiểu trả về.
Dưới đây là một ví dụ về một lớp giao dịch có một phương thức duy nhất có tên là 'process', nhận hai đối số là 'customer' và 'amount'. Hãy giả sử rằng trong phương thức này, chúng ta xử lý giao dịch và nếu nó thất bại, chúng ta trả về 'false', và nếu thành công, chúng ta trả về 'true'. Hãy giả sử rằng mọi thứ đều thành công và đơn giản trả về 'true' ở đây. Ở đây, chúng ta có thể thêm khối tài liệu và như bạn có thể thấy, IDE của tôi tự động hoàn chỉnh khối tài liệu sau khi nhấn Enter.
Trong thẻ param, chúng ta có thể chỉ định các kiểu vì chúng ta không sử dụng type hinting ở đây. Ví dụ, chúng ta có thể nói rằng đối số 'customer' thực tế là kiểu của lớp 'customer' và 'amount' là kiểu float, sau đó thẻ return là kiểu boolean. Bạn cũng có thể tùy chọn thêm mô tả ngay sau đó và cung cấp mô tả cho phương thức luôn. Một số nhà phát triển thích tài liệu mọi thứ, tôi cá nhân không tài liệu mọi thứ vì bạn có thể đơn giản là sử dụng type hinting, chẳng hạn như 'customer' ở đây và 'float' ở đây, điều này tương đương với việc sử dụng thẻ param và thẻ return.
Bạn cũng có thể nhập kiểu trả về ở đây là boolean và khối tài liệu này trở nên thừa thãi trừ khi bạn muốn cung cấp thêm thông tin về kiểu đối số trả về hoặc phương thức. Ngoài ra, nếu bạn mong đợi một đối số có thể thuộc nhiều kiểu hoặc phương thức của bạn có thể trả về nhiều kiểu, thì trước PHP 8, bạn phải sử dụng thẻ param và sử dụng ký tự | để chỉ định các kiểu khác nhau. Tuy nhiên, kể từ PHP 8, bạn có thể sử dụng union types để type hint nhiều kiểu khác nhau.

02:29 - @throws tag
###
Thẻ throws là thẻ tiếp theo mà chúng ta sẽ nói về, đơn giản chỉ định rõ loại ngoại lệ hoặc các ngoại lệ mà dự kiến sẽ được ném ra bởi phương thức hoặc hàm này. Chúng ta chưa thảo luận về ngoại lệ một cách cụ thể, điều đó sẽ được đề cập sớm. Tuy nhiên, cơ bản, bạn có thể chỉ định ngoại lệ nào dự kiến sẽ được ném ra từ phương thức này. Vì vậy, bạn sẽ đặt tên của ngoại lệ ở đây, sau đó nhân bản nó nếu bạn mong đợi nhiều loại ngoại lệ được ném ra và đặt chúng theo cách đó.

02:54 - @var tag
###
Thẻ var là thẻ được sử dụng để tài liệu loại của các thuộc tính, biến và hằng số. Giả sử chúng ta muốn có các thuộc tính 'customer' và 'amount' thay vì các đối số được truyền vào phương thức, vì vậy chúng ta sẽ định nghĩa các thuộc tính ở đây. Hãy loại bỏ phương thức này tạm thời vì chúng ta không cần nó, và trước phiên bản PHP 7.4, bạn không thể sử dụng type hinting cho điều này, vì vậy bạn phải sử dụng khối tài liệu ở đây bằng cách sử dụng thẻ var để chỉ định loại của thuộc tính này. Ví dụ, chúng ta có thể làm 'customer' trong trường hợp này và chúng ta có thể làm 'float' trong trường hợp này. Tuy nhiên, kể từ PHP 7.4, bạn cũng có thể nhập trực tiếp các thuộc tính này.
Thẻ var này đặc biệt hữu ích khi làm việc với các vòng lặp. Nếu bạn lặp qua một tập hợp hoặc mảng các đối tượng, trong đó mỗi phần tử là một đối tượng của một lớp nào đó, bạn có thể chỉ định kiểu bằng cách sử dụng thẻ var, và các IDE như PhpStorm sẽ tự động hoàn thành thuộc tính và phương thức có sẵn trên đối tượng đó. Ví dụ, chúng ta có thể có một phương thức 'foo' ở đây, trong đó chúng ta nhận một mảng và giả định rằng mỗi phần tử của mảng đó là một đối tượng. Chúng ta có thể làm như sau, lặp qua mảng và sau đó có thể muốn truy cập các thuộc tính hoặc phương thức trên đối tượng đó. Tuy nhiên, IDE sẽ không thể tự động hoàn thành vì nó không biết kiểu của đối tượng đó. Bạn có thể chỉ định kiểu bằng thẻ var ở đây và bạn có thể nói rằng có thể đây là một mảng của các đối tượng 'customer', vì vậy bạn có thể chỉ định 'customer' ở đây. Giờ đây, chúng ta biết rằng phương thức của khách hàng không tồn tại, nhưng tôi biết rằng đối tượng khách hàng có một thuộc tính 'name' mà tôi đã thêm, vì vậy chúng ta có thể đơn giản là truy cập nó và chúng ta thấy rằng IDE tự động hoàn thành nó.
Một cách khác mà bạn có thể làm điều này mà không cần thẻ var là nếu bạn chấp nhận một đối số trong một phương thức, bạn có thể đơn giản thêm khối tài liệu vào phương thức và thay vì kiểu mảng, bạn có thể nói rằng đây là một mảng của các 'customer' bằng cách sử dụng kiểu 'customer' với dấu ngoặc vuông và điều này cho biết rằng chúng ta có một mảng của các 'customer', và bây giờ chúng ta có thể loại bỏ phần này và nó vẫn sẽ tự động hoàn thành các thuộc tính và phương thức trên đối tượng đó

04:56 - @property & @method tags
###
"Các thẻ property và method
Các thẻ này cho phép một lớp biết được những phương thức và thuộc tính 'kỳ diệu' (magic methods và properties) có sẵn. Hãy nhớ khi chúng ta đã thảo luận về magic methods để tạo các thuộc tính động và gọi các phương thức không tồn tại, những thuộc tính và phương thức đó không thể tự động hoàn thành nếu chúng không có sẵn trực tiếp trong lớp, phải không? Tuy nhiên, với sự giúp đỡ của các thẻ này, bạn có thể chỉ định những thuộc tính và phương thức nào có sẵn trong lớp này.
Ví dụ, chúng ta có thể nói rằng lớp này có một thuộc tính nguyên 'x' và một thuộc tính số thực 'y', sau đó chúng ta giả định rằng chúng ta sử dụng các phương thức getter và setter ở đây để tạo ra những thuộc tính động này. Bây giờ, khi chúng ta có một đối tượng của lớp Transaction, IDE sẽ có thể tự động hoàn thành 'x' và 'y' vì chúng ta đã thêm thẻ property vào đây. Nếu bạn chỉ muốn gợi ý rằng một thuộc tính chỉ dùng để đọc hoặc chỉ dùng để viết, nghĩa là nó chỉ cho phép đọc hoặc chỉ cho phép viết, bạn có thể đơn giản là sử dụng property-read và property-write, và IDE sẽ đơn giản là gạch chân các việc sử dụng sai. Nhưng nếu bạn muốn cho phép cả đọc và viết, bạn chỉ cần sử dụng thẻ property giống như trong trường hợp thông thường.
Tương tự như các thuộc tính, bạn cũng có thể có các cuộc gọi phương thức 'kỳ diệu', nó có thể có __call và __callStatic cho các phương thức tĩnh và chúng có thể gọi các phương thức không tồn tại. Họ không thể tự động hoàn thành trên đối tượng này. Bạn có thể làm cho nó tự động hoàn thành bằng cách thêm thẻ method ở đây và chỉ định kiểu trả về. Ví dụ, chúng ta có một phương thức trả về số nguyên và tên phương thức là 'foo', nó chấp nhận một chuỗi làm đối số. Bây giờ khi chúng ta sử dụng một đối tượng của lớp này, phương thức 'foo' sẽ có sẵn và trả về số nguyên, đồng thời chấp nhận một chuỗi đối số. Nếu bạn muốn làm cho phương thức này trở thành phương thức tĩnh, bạn có thể thêm từ khóa 'static' ở phía trước.
Lưu ý rằng không có thẻ nào trong số các thẻ này thêm bất kỳ loại kiểm tra nào. Chúng có thể thêm một số kiểm tra ở mức IDE, nghĩa là IDE có thể gạch chân các điều dựa trên các thẻ này, nhưng nó sẽ không ảnh hưởng đến việc thực thi mã của bạn. Chúng tôi đã nói về các thẻ này là những thẻ 'đánh dấu' (annotation), và thêm vào đó, chúng còn có khả năng ảnh hưởng đến cách mã hoạt động.
Chúng cho phép bạn nhúng dữ liệu meta vào bên trong khối tài liệu, sau đó có thể được xử lý bởi một số công cụ hoặc framework. PHP đã giới thiệu cái gọi là 'attributes' có mục đích tương tự và chúng tôi sẽ bàn về attributes trong một video riêng sau này trong khóa học. Tôi sẽ để lại đường dẫn trong mô tả để bạn có thể đọc thêm về khối tài liệu và các thẻ khả dụng khác chi tiết hơn, vì vậy hãy kiểm tra n

07:19 - Personal opinion/preference
###
hiếu nếu bạn muốn biết thêm. Cá nhân tôi đã sử dụng để tài liệu mọi thứ cách đây vài năm, nhưng vì PHP đang có sự hỗ trợ về kiểu tốt và bây giờ với kiểu liên kết trong PHP 8, tôi có thể đơn giản là type hint mọi thứ, điều này làm cho hầu hết các khối tài liệu trở nên dư thừa đối với tôi, nên tôi đã thêm ít và ít khối tài liệu vào mã của tôi. Điều này chỉ là sở thích cá nhân của tôi, một số nhà phát triển khác có thể thích thêm khối tài liệu và một số không. Tôi không còn muốn thêm chúng nữa trừ khi chúng cung cấp giá trị thực sự hoặc một số ngữ cảnh hoặc thông tin bổ sung. Nếu tôi có một phương thức đơn giản có các đối số và kiểu trả về được type hint, thì thêm khối tài liệu để đơn giản là lặp lại điều đó, theo quan điểm của tôi, chỉ là thêm tiếng ồn thừa và không đưa ra giá trị thực sự. Nó có thể thêm màu sắc trong các trình biên tập, nhưng đó không phải là lí do đủ tốt để tôi thêm khối tài liệu vào mọi thứ. Nhưng một lần nữa, đó chỉ là sở thích cá nhân của tôi. Một lý do khác mà tôi ngừng viết khối tài liệu là để thúc đẩy bản thân viết mã tốt và đơn giản hơn. Nếu tôi phải viết mô tả dài dòng để giải thích phương thức làm gì, đó là một dấu hiệu cho thấy có lẽ phương thức đó đang làm quá nhiều hoặc rất phức tạp. Tôi thấy cơ hội để tái cấu trúc và đơn giản hóa phương thức sao cho không cần thêm bất kỳ bình luận nào. Điều này đã hoạt động tốt đối với tôi và đẩy tôi viết mã đơn giản và dễ hiểu, nơi chữ ký phương thức là tất cả những gì cần để hiểu cơ bản về việc phương thức đó làm gì hoặc nó nên làm gì. Tất nhiên, điều này không áp dụng cho tất cả mọi thứ, luôn có các trường hợp biên khả thi mà tôi cần cung cấp một số thông tin bổ sung. Điều này cũng không có nghĩa bạn không nên tài liệu mã của bạn, có nhiều trường hợp sử dụng và cũng là vấn đề cá nhân. Hãy cho tôi biết trong phần bình luận bạn nghĩ gì về khối tài liệu và liệu bạn thích tài liệu mọi thứ không, cùng với quan điểm tổng quan của bạn về chủ đề này. Đó là tất cả cho video này, cảm ơn bạn rất nhiều vì đã xem. Nếu bạn thích bài học này, hãy cho nó một ngón tay cái, chia sẻ và đăng ký kênh và tôi sẽ gặp bạn ở video tiếp theo."
